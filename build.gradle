import com.modrinth.minotaur.dependencies.ModDependency

plugins {
    id 'fabric-loom' version '1.0-SNAPSHOT'
    id 'maven-publish'
    id 'com.modrinth.minotaur' version '2.+'
    id 'io.github.juuxel.loom-quiltflower' version '1.8.0'
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    maven { url 'https://maven.nucleoid.xyz' }
    maven { url 'https://jitpack.io' }
    maven { url 'https://maven.shedaniel.me/' }
    maven { url 'https://maven.terraformersmc.com/releases/' }
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation include("eu.pb4:sgui:${project.sgui_version}")
	modImplementation include("eu.pb4:polymer-core:${project.polymer_version}")
	modImplementation include("eu.pb4:polymer-resource-pack:${project.polymer_version}")
	modImplementation include("fr.catcore:server-translations-api:${project.sta_version}")
	modImplementation("com.github.DaFuqs:Revelationary:${project.revelationary_version}")
	modApi("me.shedaniel.cloth:cloth-config-fabric:9.0.94") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	modApi("com.terraformersmc:modmenu:5.0.2")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
    it.options.release.set(17)
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// maven publishing
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
}

loom {
    serverOnlyMinecraftJar()
	log4jConfigs.from(file("log4j2.xml"))
	runs {
        // datagen
		datagen {
			server()

			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.modid=${modid}"

			runDir "build/datagen"
		}
	}
}

sourceSets {
    // add resources to the compiled jar
	main {
		resources {
			srcDirs += [
					'src/main/generated'
			]
		}
	}
}


modrinth {
	token = System.getenv('MODRINTH_TOKEN') // Please use an environment variable for this! The default is `$MODRINTH_TOKEN`.
	projectId = "${project.modrinth_id}" // The ID of your Modrinth project. Slugs will not work.
	versionNumber = "${project.mod_version}" // The (preferably SemVer) version of the mod. If not specified, it'll use the `version` declaration
	versionName = "${project.mod_version}" // The version title. If not specified, it'll use the version number
	uploadFile = remapJar // Tells Minotaur to use the remapped jar
	gameVersions = ["${project.minecraft_version}"] // An array of game versions the version supports
	loaders = ['fabric', 'quilt'] // Self-explanatory.
	dependencies = [
			new ModDependency('P7dR8mSH', 'required') // Creates a new required dependency on Fabric API
	]
}

